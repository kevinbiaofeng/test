package com.xjw.api.platform.gm;

import java.math.BigDecimal;
import java.util.HashMap;
import java.util.Map;

import org.springframework.stereotype.Component;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.TypeReference;
import com.xjw.api.platform.RemoteApi;
import com.xjw.common.exception.HttpException;
import com.xjw.common.result.ModelResult;

@Component
public class GmMgRemoteApi extends RemoteApi {
   
    public ModelResult<BigDecimal> balance(Long userId) throws HttpException {
        final String path = "/platform/gm/mg/balance";
        
        Map<String, String> params = new HashMap<>();
        params.put("userId", userId.toString());
        
        String responseText = super.post(path, params);
        
        TypeReference<ModelResult<BigDecimal>> typeReference = new TypeReference<ModelResult<BigDecimal>>(){};
        return JSON.parseObject(responseText, typeReference);
    }
    
    public ModelResult<BigDecimal> deposit(Long userId, BigDecimal amount, Long operatingUser, String fromFunction) throws HttpException {
        final String path = "/platform/gm/mg/deposit";

        Map<String, String> params = new HashMap<>();
        params.put("userId", userId.toString());
        params.put("amount", amount.toString());
        params.put("operatingUser", operatingUser.toString());
        params.put("fromFunction", fromFunction);
        
        String responseText = super.post(path, params);
        
        TypeReference<ModelResult<BigDecimal>> typeReference = new TypeReference<ModelResult<BigDecimal>>(){};
        return JSON.parseObject(responseText, typeReference);
    }
    
    public ModelResult<BigDecimal> withdraw(Long userId, BigDecimal amount, Long operatingUser, String fromFunction) throws HttpException {
        final String path = "/platform/gm/mg/withdraw";

        Map<String, String> params = new HashMap<>();
        params.put("userId", userId.toString());
        params.put("amount", amount.toString());
        params.put("operatingUser", operatingUser.toString());
        params.put("fromFunction", fromFunction);
        
        String responseText = super.post(path, params);
        
        TypeReference<ModelResult<BigDecimal>> typeReference = new TypeReference<ModelResult<BigDecimal>>(){};
        return JSON.parseObject(responseText, typeReference);
    }
    
    public ModelResult<String> launch(Long userId, Integer appId, Integer itemId) throws HttpException {
        final String path = "/platform/gm/mg/launch";

        Map<String, String> params = new HashMap<>();
        params.put("userId", userId.toString());
        params.put("appId", appId.toString());
        params.put("itemId", itemId.toString());
        
        String responseText = super.post(path, params);
        
        TypeReference<ModelResult<String>> typeReference = new TypeReference<ModelResult<String>>(){};
        return JSON.parseObject(responseText, typeReference);
    }
}
