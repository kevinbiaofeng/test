package com.xjw.controller.media;

import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.util.Calendar;
import java.util.HashMap;
import java.util.Map;

import javax.imageio.ImageIO;

import org.apache.commons.io.FileUtils;
import org.apache.commons.io.FilenameUtils;
import org.apache.commons.lang3.RandomStringUtils;
import org.apache.commons.lang3.StringUtils;
import org.apache.commons.lang3.time.DateFormatUtils;
import org.bytedeco.javacv.FFmpegFrameGrabber;
import org.bytedeco.javacv.Frame;
import org.bytedeco.javacv.Java2DFrameConverter;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import com.xjw.common.result.ModelResult;
import com.xjw.controller.BaseController;
import com.xjw.entity.Page;
import com.xjw.entity.form.media.VideoForm;
import com.xjw.entity.po.media.Video;
import com.xjw.kzenum.sys.YesORNoEnum;
import com.xjw.service.media.VideoService;
import com.xjw.util.SequenceBuilder;

/**
 * 视频
 */
@Controller
@RequestMapping("/video/")
public class VideoController extends BaseController {
	private static Logger logger = LoggerFactory.getLogger(VideoController.class);

	private static String IMAGE_EXTESION = "png";
	
	@Value("${upload.video.directory}")
	private String videoDirectory;
	@Value("${upload.image.directory}")
	private String imageDirectory;
	
	@Autowired
	private VideoService videoService;

	@RequestMapping("list")
	public String list(VideoForm form, Model model) {
		Map<String, Object> params = new HashMap<>();

		if(StringUtils.isNotBlank(form.getCode())) {
			params.put("code", form.getCode());
		}
		if(null != form.getType()) {
			params.put("type", form.getType());
		}
		if(StringUtils.isNotBlank(form.getStar())) {
			params.put("star", form.getStar());
		}
		if(null != form.getVipFlag()) {
			params.put("vipFlag", form.getVipFlag());
		}
		if(null != form.getStatus()) {
			params.put("status", form.getStatus());
		}

		try {
			Page<Video> page = videoService.getPage(params, form.getPageNo(), form.getPageSize());
			model.addAttribute("page", page);
		} catch (Exception e) {
			logger.error(e.getMessage(), e);
		}

		model.addAttribute("form", form);
		return "xjw/media/video-list";
	}

	@RequestMapping("new")
	public String editNew() {
		return "xjw/media/video-new";
	}

	@RequestMapping("edit")
	public String edit(Long id, Model model) {
		Video video = videoService.selectById(id);
		model.addAttribute("video", video);
		return "xjw/media/video-edit";
	}

	@RequestMapping("update")
	@ResponseBody
	public String update(Video video) {
		try {
			videoService.update(video);
			super.writerSuccessJSONDataById("编辑成功", null, "/video/edit?id=" + video.getId(), "/video/list", null);
		} catch (Exception e) {
			logger.error(e.getMessage(), e);
			writerJSONData("failure", "编辑失败", null, "/video/list");
		}

		return null;
	}
	
	/**
	 * 截图
	 */
	@RequestMapping("screen")
	@ResponseBody
	public ModelResult<BufferedImage> screen(@RequestParam Long id, @RequestParam Integer second) {
		try{
			Video video = videoService.selectById(id);
			String videoLocation = videoDirectory + video.getPath(); 
			InputStream videoStream = FileUtils.openInputStream(new File(videoLocation));
		
			VideoProps videoProps = this.parseVideo(videoStream, second);
			
			String imageLocation = imageDirectory + video.getImagePath();
			File imageFile = new File(imageLocation);
			FileUtils.forceMkdirParent(imageFile);
	    	ImageIO.write(videoProps.getImage(), IMAGE_EXTESION, imageFile);
			
			return new ModelResult<>().withSuccess();
		} catch(Exception e) {
			logger.error(e.getMessage(), e);
			return new ModelResult<>().withError(e.getMessage());
		}
	}

	/**
	 * 上传
	 */
	@RequestMapping(value = "/upload", method = RequestMethod.POST)
	@ResponseBody
	public ModelResult<String> upload(MultipartFile file) {
		if (null != file) {
			String baseName = SequenceBuilder.next(); 
			String basePath = DateFormatUtils.format(Calendar.getInstance(), "yyyy/MM/dd/");

			String videoExtension = FilenameUtils.getExtension(file.getOriginalFilename());
			String videoName = baseName + "." + videoExtension;
			String videoPath = basePath + videoName; 
			String videoLocation = videoDirectory + videoPath; 
			
	    	String imageName = baseName + "." + IMAGE_EXTESION;	
	    	String imagePath = basePath + imageName;	
	    	String imageLocation = imageDirectory + imagePath;	

			try {
				FileUtils.copyInputStreamToFile(file.getInputStream(), new File(videoLocation));	
				VideoProps videoProps = parseVideo(file.getInputStream(), 1);
				
				File imageFile = new File(imageLocation);
				FileUtils.forceMkdirParent(imageFile);
		    	ImageIO.write(videoProps.getImage(), IMAGE_EXTESION, imageFile);

				Video video = new Video();
				video.setCode(RandomStringUtils.randomAlphanumeric(32));
				video.setOriginalName(file.getOriginalFilename());
				video.setImagePath(imagePath);
				video.setPath(videoPath);
				video.setExtension(videoExtension);
				video.setSize(FileUtils.sizeOf(new File(videoLocation)));
				video.setLength(videoProps.getLength());
				video.setFavoriteCount(0);
				video.setClickCount(0);
				video.setStatus(Integer.valueOf(YesORNoEnum.NO.getCode()));
				
				videoService.save(video);
			} catch (Exception e) {
				logger.error(e.getMessage(), e);
				return new ModelResult<>().withError(e.getMessage());
			}
		}

		return new ModelResult<>().withSuccess();
	}
	
	/**
	 * 解析视频
	 */
	private VideoProps parseVideo(InputStream videoStream, int second) throws IOException {
		FFmpegFrameGrabber ff = new FFmpegFrameGrabber(videoStream);
		ff.start(); 

		try {
			int ffLength = ff.getLengthInFrames(); 
			double ffRate = ff.getFrameRate();

			int frameIndex = (int)((second-1) * ffRate) + 1;
			frameIndex = (frameIndex <= 0 ? 1 : (frameIndex > ffLength ? ffLength : frameIndex));

			Frame frame = null;
			for (int i = 1; i <= frameIndex; i++) {
				frame = ff.grabImage();
			}

			Java2DFrameConverter converter = new Java2DFrameConverter();
			BufferedImage image = converter.getBufferedImage(frame);

			VideoProps videoProps = new VideoProps();
			videoProps.setLength((int) (ffLength / ffRate));
			videoProps.setImage(image);
			return videoProps;
		} catch (Exception e) {
			throw e;
		} finally {
			ff.stop();
		}
	}

	/**
	 * 视频属性
	 */
	static class VideoProps {
		/** 视频时长(秒) */
		private int length;
		/** 视频截图 */
		private BufferedImage image;

		public int getLength() {
			return length;
		}

		public void setLength(int length) {
			this.length = length;
		}

		public BufferedImage getImage() {
			return image;
		}

		public void setImage(BufferedImage image) {
			this.image = image;
		}
	}
}
