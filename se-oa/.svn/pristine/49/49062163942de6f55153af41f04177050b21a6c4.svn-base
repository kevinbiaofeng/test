package com.xjw.controller.file;

import java.io.File;
import java.util.Calendar;
import java.util.HashMap;
import java.util.Map;

import org.apache.commons.io.FileUtils;
import org.apache.commons.io.FilenameUtils;
import org.apache.commons.lang3.RandomStringUtils;
import org.apache.commons.lang3.StringUtils;
import org.apache.commons.lang3.time.DateFormatUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import com.xjw.common.result.ModelResult;
import com.xjw.controller.BaseController;
import com.xjw.entity.Page;
import com.xjw.entity.form.file.MaterialForm;
import com.xjw.entity.po.file.Material;
import com.xjw.service.file.MaterialService;
import com.xjw.util.SequenceBuilder;

/**
 * 素材
 */
@Controller
@RequestMapping("/material/")
public class MaterialController extends BaseController {
	private static Logger logger = LoggerFactory.getLogger(MaterialController.class);

	@Value("${upload.video.directory}")
	private String videoirectory;
	
	@Autowired
	private MaterialService materialService;

	@RequestMapping("list")
	public String list(MaterialForm form, Model model) {
		Map<String, Object> params = new HashMap<>();
		if(StringUtils.isNotBlank(form.getNum())){
			params.put("num", form.getNum());
		}
		
		try {
			Page<Material> page = materialService.getPage(params, form.getPageNo(), form.getPageSize());
			model.addAttribute("page", page);
		} catch (Exception e) {
			logger.error(e.getMessage(), e);
		}
		
		model.addAttribute("form", form);
		return "xjw/file/material-list";
	}
	
	@RequestMapping("new")
	public String editNew(Model model, Integer pageNo, Integer pageSize) {
		return "xjw/file/material-new";
	}

	@RequestMapping(value = "/upload", method = RequestMethod.POST)
	@ResponseBody
	public ModelResult<String> upload(MultipartFile[] file) {
		if (null != file) {
			for (MultipartFile f : file) {
				String extension = FilenameUtils.getExtension(f.getOriginalFilename());
				String fileName = SequenceBuilder.next() + "." + extension;
				String filePath = DateFormatUtils.format(Calendar.getInstance(), "yyyy/MM/dd/") + fileName;
				String fullPath = videoirectory + filePath;

				try{
					FileUtils.copyInputStreamToFile(f.getInputStream(), new File(fullPath));
					
					Material material = new Material();
					material.setName(fileName);
					material.setNum(RandomStringUtils.randomAlphanumeric(36));
					material.setOriginalName(f.getOriginalFilename());
					material.setPath(filePath);
					material.setExtension(extension);
					materialService.save(material);
				}catch(Exception e){
					logger.error(e.getMessage(), e);
					return new ModelResult<>().withError(e.getMessage());
				}
			}
		}

		return new ModelResult<>().withSuccess();
	}
}